{
  "name": "flickr-with-uploads",
  "description": "Simple Flickr API for Node.js using OAuth 1.0a, supporting uploads.",
  "version": "0.2.2",
  "authors": [
    "Christopher Brown <audiere@gmail.com>",
    "Sujal Shah <codesujal@gmail.com>"
  ],
  "keywords": [
    "flickr",
    "uploads",
    "api",
    "oauth"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/chbrown/flickr-with-uploads.git"
  },
  "dependencies": {
    "oauth": "git://github.com/chbrown/node-oauth.git",
    "form-data": "*"
  },
  "main": "index",
  "readme": "# flickr-with-uploads\n\n115-line Node.js wrapper for the Flickr API, using oAuth authentication, supporting uploads.\n\nIt currently supports only Flickr's \"API Methods\" (on the right side of the page [Flickr API Documentation](http://www.flickr.com/services/api/)), and [Uploading](http://www.flickr.com/services/api/upload.api.html).\n\nA pull request is in the process, to ciaranj's `node-oauth`, for some required functionality to allow signing but not GET/POSTing with that oAuth library. For the time being, this package requires my `node-oauth` fork, which includes that functionality.\n\nThe library is forked from [node-flickr](https://github.com/sujal/node-flickr), but I pretty much rewrote the whole flickr.js file. I fixed the formatting, simplified the signing or not-signing handling, and **most importantly** now support uploading. Even though I added a pretty big feature, I decreased the line count from 158 to 115.\n[node-flickr](https://github.com/sujal/node-flickr), in turn, is heavily inspired by [the flickrnode library by Ciaran Jessup](https://github.com/ciaranj/flickrnode).\n\n## Initialization\n\nInstall the library into your package.json file or using the following command:\n\n    npm install flickr-with-uploads\n\nAnd then require it like so:\n\n````javascript\nvar Flickr = require('flickr-with-uploads').Flickr;\n\n// constructor arguments: new Flickr(consumer_key, consumer_secret, oauth_token, oauth_token_secret, base_url)\nvar client = new Flickr('0RjUImXvsYx2P8Gi4eZScFh9fkLJltDV', 'mbu87dOB0FWncTRJ',\n  '3XF0pqP4daZf9oIlx-a7H1uMLeGrBidkJU', 'KpslBxHoh4QYk6ad')\n````\n\nI read in options from a `.env` file like so, but you can do it however you want:\n\n````javascript\nfunction readOptions(callback) {\n  fs.readFile(path.join(__dirname, '.env'), 'utf8', function(err, text) {\n    var opts = {};\n    if (!err) {\n      text.split(/\\n/).forEach(function(line) {\n        var line_parts = line.split(/\\=/);\n        opts[line_parts[0]] = line_parts[1];\n      });\n    }\n    callback(err, opts);\n  });\n}\n````\n\nAnd my .env file (all my values are fake, obviously--actual credentials are all hexadecimal):\n\n    FLICKR_API_KEY=0RjUImXvsYx2P8Gi4eZScFh9fkLJltDV\n    FLICKR_API_SECRET=mbu87dOB0FWncTRJ\n    FLICKR_OA_TOKEN=3XF0pqP4daZf9oIlx-a7H1uMLeGrBidkJU\n    FLICKR_OA_TOKEN_SECRET=KpslBxHoh4QYk6ad\n\nAnd then since all my calls are signed, I wrote a helper function, `api`:\n\n````javascript\nfunction api(method_name, data, callback) {\n  // overloaded as (method_name, data, callback)\n  return client.createRequest(method_name, data, true, callback).send();\n}\n````\n\n## Examples\n\nUsing my `api` function from above:\n\n````javascript\nvar fullpath = '/Users/chbrown/Pictures/Seaworld - The Heist/orca_019.jpg';\nvar params = {\n  title: 'My new pet: baby orca', description: \"Don't tell Seaworld!\",\n  is_public: 0, is_friend: 1, is_family: 1, hidden: 2,\n  photo: fs.createReadStream(fullpath, {flags: 'r'})\n};\n// the method_name gets the special value of \"upload\" for uploads.\napi('upload', params, function(err, response) {\n  if (err) {\n    console.error(\"Could not upload photo: \", self.toString() + \". Error message:\");\n    console.error();\n  }\n  else {\n    // usually, the method name is precisely the name of the API method, as they are here:\n    api('flickr.photos.getInfo', {photo_id: response.photoid}, function(err, response) {\n      api('flickr.photosets.addPhoto', {photoset_id: 1272356126, photo_id: response.photo.id}, function(err) {\n        console.log(\"Full photo info:\", response.photo);\n      });\n    });\n  }\n});\n````\n\n## Development\n\nFixes are totally welcome! In the master branch, even! Just use sane formatting (like what jsbeautifier.org uses, but with 2-space indents, not 4).\n\n## Dependencies\n\nJust one dependency: [form-data](https://github.com/felixge/node-form-data). This is just for the uploads. It works awesomely, only takes about three lines to use. felixge is the author of (node-formidable)[https://github.com/felixge/node-formidable], which is another great form parsing library.\n\n## Related\n\nThe node-flickr rewrite was all just to support my (Flickr Backup Script)[https://github.com/chbrown/flickr-backup], which is a script to automatically backup a directory of directories full of pictures as sets of photos to Flickr (since Pro accounts have unlimited storage). There are lots more examples in that code, too.\n\n## License\n\nMIT Licensed. See the LICENSE file for full text.\n",
  "readmeFilename": "README.md",
  "_id": "flickr-with-uploads@0.2.2",
  "dist": {
    "shasum": "3f60b3231b4acd186ca3140d63dd6f0108113ef9"
  },
  "_from": "flickr-with-uploads"
}
